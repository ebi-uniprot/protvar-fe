variables:
  BE_API: "https://wwwdev.ebi.ac.uk/ProtVar/api"
stages:
#  - test
  - build_static_assets
  - build_docker_image
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        BE_API: "https://www.ebi.ac.uk/ProtVar/api"
    - when: always # Run the pipeline in other cases

.js:
  image: node:16.15.1
  before_script:
    - node --version
    - npm --version
    - yarn --version
    - pwd
    - ls
    - yarn install

#test:
#  stage: test
#  script:
#    - echo "skipping test for now";

build_static_assets:
  only:
    refs:
      - main
      - dev
      - test
  extends: .js
  stage: build_static_assets
  script:
    - echo "REACT_APP_API_BASE_URL=${BE_API}" > .env.local
    - yarn build
  artifacts:
    paths:
      - build/

build_docker_image:
  only:
    refs:
      - main
      - dev
      - test
  stage: build_docker_image
  image: docker:latest
  tags:
    - dind
  services:
    - docker:dind
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker --version
    - CONTAINER_IMAGE=${CI_REGISTRY_IMAGE}:latest
    - echo ${CONTAINER_IMAGE}
    - docker build -t ${CONTAINER_IMAGE} --no-cache -f deploy/Dockerfile .
    - docker image ls
    - docker push ${CONTAINER_IMAGE}
    - docker rmi ${CONTAINER_IMAGE}
    - docker logout "$CI_REGISTRY"

.kubectl:
  image: alpine
  stage: deploy
  before_script:
    - apk add --no-cache curl git bash
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    #- git clone https://oauth2:${GITLAB_USER_API_TOKEN}@gitlab.ebi.ac.uk/uniprot/framework/protvar-deploy.git
    #- if [ ! -f protvar-deploy/app/protvar-fe/deploy.sh ]; then echo "Deploy script is missing"; exit 1; fi
    - if [ ! -f deploy/deploy.sh ]; then echo "Deploy script is missing"; exit 1; fi
    - chmod +x deploy/deploy.sh

dev-deploy:
  extends: .kubectl
  only:
    refs:
      - dev
  script:
    - deploy/deploy.sh ENV=DV APP_NAME=protvar-fe K8S_NAMESPACE=protvar-dev
      #HX protvar-fe protvar-dev deployment # data-center app_name namespace type-of-deployment

test-deploy:
  extends: .kubectl
  only:
    refs:
      - test
  script:
    - deploy/deploy.sh ENV=DV APP_NAME=protvar-fe K8S_NAMESPACE=protvar-test # HX protvar-fe protvar-test deployment

prod-deploy:
  extends: .kubectl
  only:
    refs:
      - main
  script:
    - deploy/deploy.sh ENV=FB APP_NAME=protvar-fe K8S_NAMESPACE=protvar # HX protvar-fe protvar deployment # fallback app_name namespace type-of-deployment
    - deploy/deploy.sh ENV=PB APP_NAME=protvar-fe K8S_NAMESPACE=protvar # HL protvar-fe protvar deployment # prod app_name namespace type-of-deployment